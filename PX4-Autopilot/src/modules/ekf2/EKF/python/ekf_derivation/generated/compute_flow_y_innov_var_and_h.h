// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_flow_y_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     distance: Scalar
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     H: Matrix23_1
 */
template <typename Scalar>
void ComputeFlowYInnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                              const matrix::Matrix<Scalar, 23, 23>& P, const Scalar distance,
                              const Scalar R, const Scalar epsilon,
                              Scalar* const innov_var = nullptr,
                              matrix::Matrix<Scalar, 23, 1>* const H = nullptr) {
  // Total ops: 116

  // Input arrays

  // Intermediate terms (19)
  const Scalar _tmp0 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp2 =
      Scalar(1.0) /
      (distance + epsilon * (2 * math::min<Scalar>(0, (((distance) > 0) - ((distance) < 0))) + 1));
  const Scalar _tmp3 = _tmp2 * (-2 * _tmp0 - 2 * _tmp1 + 1);
  const Scalar _tmp4 = -2 * state(0, 0) * state(2, 0);
  const Scalar _tmp5 = 2 * state(3, 0);
  const Scalar _tmp6 = _tmp5 * state(1, 0);
  const Scalar _tmp7 = _tmp5 * state(2, 0);
  const Scalar _tmp8 = 2 * state(1, 0);
  const Scalar _tmp9 = _tmp8 * state(0, 0);
  const Scalar _tmp10 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp11 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp12 = -_tmp0 + _tmp1;
  const Scalar _tmp13 = _tmp2 * (state(4, 0) * (_tmp4 - _tmp6) + state(5, 0) * (-_tmp7 + _tmp9) +
                                 state(6, 0) * (-_tmp10 + _tmp11 + _tmp12));
  const Scalar _tmp14 = _tmp5 * state(0, 0);
  const Scalar _tmp15 = _tmp8 * state(2, 0);
  const Scalar _tmp16 =
      _tmp2 * (state(4, 0) * (-_tmp14 + _tmp15) + state(5, 0) * (_tmp10 - _tmp11 + _tmp12) +
               state(6, 0) * (_tmp7 + _tmp9));
  const Scalar _tmp17 = _tmp2 * (_tmp14 + _tmp15);
  const Scalar _tmp18 = _tmp2 * (_tmp4 + _tmp6);

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = R -
                 _tmp13 * (-P(1, 1) * _tmp13 - P(2, 1) * _tmp16 - P(3, 1) * _tmp3 -
                           P(4, 1) * _tmp17 - P(5, 1) * _tmp18) -
                 _tmp16 * (-P(1, 2) * _tmp13 - P(2, 2) * _tmp16 - P(3, 2) * _tmp3 -
                           P(4, 2) * _tmp17 - P(5, 2) * _tmp18) -
                 _tmp17 * (-P(1, 4) * _tmp13 - P(2, 4) * _tmp16 - P(3, 4) * _tmp3 -
                           P(4, 4) * _tmp17 - P(5, 4) * _tmp18) -
                 _tmp18 * (-P(1, 5) * _tmp13 - P(2, 5) * _tmp16 - P(3, 5) * _tmp3 -
                           P(4, 5) * _tmp17 - P(5, 5) * _tmp18) -
                 _tmp3 * (-P(1, 3) * _tmp13 - P(2, 3) * _tmp16 - P(3, 3) * _tmp3 -
                          P(4, 3) * _tmp17 - P(5, 3) * _tmp18);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _h = (*H);

    _h.setZero();

    _h(1, 0) = -_tmp13;
    _h(2, 0) = -_tmp16;
    _h(3, 0) = -_tmp3;
    _h(4, 0) = -_tmp17;
    _h(5, 0) = -_tmp18;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
