// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_mag_z_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     H: Matrix23_1
 */
template <typename Scalar>
void ComputeMagZInnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                             const matrix::Matrix<Scalar, 23, 23>& P, const Scalar R,
                             const Scalar epsilon, Scalar* const innov_var = nullptr,
                             matrix::Matrix<Scalar, 23, 1>* const H = nullptr) {
  // Total ops: 110

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (18)
  const Scalar _tmp0 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp2 = -2 * _tmp0 - 2 * _tmp1 + 1;
  const Scalar _tmp3 = 2 * state(2, 0);
  const Scalar _tmp4 = _tmp3 * state(3, 0);
  const Scalar _tmp5 = 2 * state(0, 0);
  const Scalar _tmp6 = -_tmp5 * state(1, 0);
  const Scalar _tmp7 = _tmp4 + _tmp6;
  const Scalar _tmp8 = _tmp3 * state(0, 0);
  const Scalar _tmp9 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp12 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp13 = -_tmp0 + _tmp1;
  const Scalar _tmp14 = _tmp5 * state(3, 0);
  const Scalar _tmp15 = _tmp3 * state(1, 0);
  const Scalar _tmp16 = state(16, 0) * (-_tmp11 + _tmp12 + _tmp13) +
                        state(17, 0) * (_tmp14 + _tmp15) + state(18, 0) * (-_tmp8 + _tmp9);
  const Scalar _tmp17 = state(16, 0) * (_tmp14 - _tmp15) +
                        state(17, 0) * (_tmp11 - _tmp12 + _tmp13) + state(18, 0) * (-_tmp4 + _tmp6);

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = P(0, 20) * _tmp17 + P(1, 20) * _tmp16 + P(15, 20) * _tmp10 + P(16, 20) * _tmp7 +
                 P(17, 20) * _tmp2 + P(20, 20) + R +
                 _tmp10 * (P(0, 15) * _tmp17 + P(1, 15) * _tmp16 + P(15, 15) * _tmp10 +
                           P(16, 15) * _tmp7 + P(17, 15) * _tmp2 + P(20, 15)) +
                 _tmp16 * (P(0, 1) * _tmp17 + P(1, 1) * _tmp16 + P(15, 1) * _tmp10 +
                           P(16, 1) * _tmp7 + P(17, 1) * _tmp2 + P(20, 1)) +
                 _tmp17 * (P(0, 0) * _tmp17 + P(1, 0) * _tmp16 + P(15, 0) * _tmp10 +
                           P(16, 0) * _tmp7 + P(17, 0) * _tmp2 + P(20, 0)) +
                 _tmp2 * (P(0, 17) * _tmp17 + P(1, 17) * _tmp16 + P(15, 17) * _tmp10 +
                          P(16, 17) * _tmp7 + P(17, 17) * _tmp2 + P(20, 17)) +
                 _tmp7 * (P(0, 16) * _tmp17 + P(1, 16) * _tmp16 + P(15, 16) * _tmp10 +
                          P(16, 16) * _tmp7 + P(17, 16) * _tmp2 + P(20, 16));
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _h = (*H);

    _h.setZero();

    _h(0, 0) = _tmp17;
    _h(1, 0) = _tmp16;
    _h(15, 0) = _tmp10;
    _h(16, 0) = _tmp7;
    _h(17, 0) = _tmp2;
    _h(20, 0) = 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
