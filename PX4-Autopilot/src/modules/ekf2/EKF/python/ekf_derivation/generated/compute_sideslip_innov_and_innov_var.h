// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_sideslip_innov_and_innov_var
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov: Scalar
 *     innov_var: Scalar
 */
template <typename Scalar>
void ComputeSideslipInnovAndInnovVar(const matrix::Matrix<Scalar, 24, 1>& state,
                                     const matrix::Matrix<Scalar, 23, 23>& P, const Scalar R,
                                     const Scalar epsilon, Scalar* const innov = nullptr,
                                     Scalar* const innov_var = nullptr) {
  // Total ops: 235

  // Input arrays

  // Intermediate terms (46)
  const Scalar _tmp0 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp2 = 1 - 2 * _tmp1;
  const Scalar _tmp3 = -2 * _tmp0 + _tmp2;
  const Scalar _tmp4 = -state(22, 0) + state(4, 0);
  const Scalar _tmp5 = 2 * state(0, 0);
  const Scalar _tmp6 = _tmp5 * state(3, 0);
  const Scalar _tmp7 = 2 * state(1, 0);
  const Scalar _tmp8 = _tmp7 * state(2, 0);
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = -state(23, 0) + state(5, 0);
  const Scalar _tmp11 = _tmp5 * state(2, 0);
  const Scalar _tmp12 = -_tmp11;
  const Scalar _tmp13 = _tmp7 * state(3, 0);
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp10 * _tmp9 + _tmp14 * state(6, 0) + _tmp3 * _tmp4;
  const Scalar _tmp16 =
      _tmp15 + epsilon * (2 * math::min<Scalar>(0, (((_tmp15) > 0) - ((_tmp15) < 0))) + 1);
  const Scalar _tmp17 = Scalar(1.0) / (_tmp16);
  const Scalar _tmp18 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp19 = -2 * _tmp18 + _tmp2;
  const Scalar _tmp20 = -_tmp6;
  const Scalar _tmp21 = _tmp20 + _tmp8;
  const Scalar _tmp22 = 2 * state(2, 0) * state(3, 0);
  const Scalar _tmp23 = _tmp5 * state(1, 0);
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = _tmp21 * _tmp4 + _tmp24 * state(6, 0);
  const Scalar _tmp26 = _tmp10 * _tmp19 + _tmp25;
  const Scalar _tmp27 = _tmp26 / std::pow(_tmp16, Scalar(2));
  const Scalar _tmp28 = -_tmp14 * _tmp27 + _tmp17 * _tmp24;
  const Scalar _tmp29 = _tmp27 * _tmp3;
  const Scalar _tmp30 = _tmp17 * _tmp21;
  const Scalar _tmp31 = -_tmp29 + _tmp30;
  const Scalar _tmp32 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp33 = -_tmp32;
  const Scalar _tmp34 = -_tmp18;
  const Scalar _tmp35 = -_tmp13;
  const Scalar _tmp36 = _tmp0 - _tmp1;
  const Scalar _tmp37 = _tmp32 + _tmp34;
  const Scalar _tmp38 =
      _tmp17 * (_tmp10 * (_tmp20 - _tmp8) + _tmp4 * (_tmp0 + _tmp1 + _tmp33 + _tmp34) +
                state(6, 0) * (_tmp11 + _tmp35)) -
      _tmp27 * (_tmp10 * (_tmp36 + _tmp37) + _tmp25);
  const Scalar _tmp39 = _tmp29 - _tmp30;
  const Scalar _tmp40 = _tmp27 * _tmp9;
  const Scalar _tmp41 = _tmp17 * _tmp19;
  const Scalar _tmp42 = -_tmp40 + _tmp41;
  const Scalar _tmp43 = _tmp27 * (_tmp10 * (-_tmp22 + _tmp23) + _tmp4 * (_tmp12 + _tmp35) +
                                  state(6, 0) * (_tmp18 + _tmp33 + _tmp36));
  const Scalar _tmp44 = _tmp40 - _tmp41;
  const Scalar _tmp45 = _tmp17 * (_tmp10 * (_tmp22 - _tmp23) + _tmp4 * (_tmp11 + _tmp13) +
                                  state(6, 0) * (-_tmp0 + _tmp1 + _tmp37));

  // Output terms (2)
  if (innov != nullptr) {
    Scalar& _innov = (*innov);

    _innov = _tmp17 * _tmp26;
  }

  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var =
        R +
        _tmp28 * (P(0, 5) * _tmp45 - P(1, 5) * _tmp43 + P(2, 5) * _tmp38 + P(21, 5) * _tmp39 +
                  P(22, 5) * _tmp44 + P(3, 5) * _tmp31 + P(4, 5) * _tmp42 + P(5, 5) * _tmp28) +
        _tmp31 * (P(0, 3) * _tmp45 - P(1, 3) * _tmp43 + P(2, 3) * _tmp38 + P(21, 3) * _tmp39 +
                  P(22, 3) * _tmp44 + P(3, 3) * _tmp31 + P(4, 3) * _tmp42 + P(5, 3) * _tmp28) +
        _tmp38 * (P(0, 2) * _tmp45 - P(1, 2) * _tmp43 + P(2, 2) * _tmp38 + P(21, 2) * _tmp39 +
                  P(22, 2) * _tmp44 + P(3, 2) * _tmp31 + P(4, 2) * _tmp42 + P(5, 2) * _tmp28) +
        _tmp39 * (P(0, 21) * _tmp45 - P(1, 21) * _tmp43 + P(2, 21) * _tmp38 + P(21, 21) * _tmp39 +
                  P(22, 21) * _tmp44 + P(3, 21) * _tmp31 + P(4, 21) * _tmp42 + P(5, 21) * _tmp28) +
        _tmp42 * (P(0, 4) * _tmp45 - P(1, 4) * _tmp43 + P(2, 4) * _tmp38 + P(21, 4) * _tmp39 +
                  P(22, 4) * _tmp44 + P(3, 4) * _tmp31 + P(4, 4) * _tmp42 + P(5, 4) * _tmp28) -
        _tmp43 * (P(0, 1) * _tmp45 - P(1, 1) * _tmp43 + P(2, 1) * _tmp38 + P(21, 1) * _tmp39 +
                  P(22, 1) * _tmp44 + P(3, 1) * _tmp31 + P(4, 1) * _tmp42 + P(5, 1) * _tmp28) +
        _tmp44 * (P(0, 22) * _tmp45 - P(1, 22) * _tmp43 + P(2, 22) * _tmp38 + P(21, 22) * _tmp39 +
                  P(22, 22) * _tmp44 + P(3, 22) * _tmp31 + P(4, 22) * _tmp42 + P(5, 22) * _tmp28) +
        _tmp45 * (P(0, 0) * _tmp45 - P(1, 0) * _tmp43 + P(2, 0) * _tmp38 + P(21, 0) * _tmp39 +
                  P(22, 0) * _tmp44 + P(3, 0) * _tmp31 + P(4, 0) * _tmp42 + P(5, 0) * _tmp28);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
