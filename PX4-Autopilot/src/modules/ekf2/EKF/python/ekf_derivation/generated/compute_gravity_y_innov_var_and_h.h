// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_gravity_y_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     R: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     Hy: Matrix23_1
 */
template <typename Scalar>
void ComputeGravityYInnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                                 const matrix::Matrix<Scalar, 23, 23>& P, const Scalar R,
                                 Scalar* const innov_var = nullptr,
                                 matrix::Matrix<Scalar, 23, 1>* const Hy = nullptr) {
  // Total ops: 22

  // Input arrays

  // Intermediate terms (2)
  const Scalar _tmp0 = -std::pow(state(0, 0), Scalar(2)) + std::pow(state(1, 0), Scalar(2)) +
                       std::pow(state(2, 0), Scalar(2)) - std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 = -2 * state(0, 0) * state(2, 0) + 2 * state(1, 0) * state(3, 0);

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = R + _tmp0 * (P(0, 0) * _tmp0 + P(2, 0) * _tmp1) +
                 _tmp1 * (P(0, 2) * _tmp0 + P(2, 2) * _tmp1);
  }

  if (Hy != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _hy = (*Hy);

    _hy.setZero();

    _hy(0, 0) = _tmp0;
    _hy(2, 0) = _tmp1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
