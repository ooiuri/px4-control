// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_flow_xy_innov_var_and_hx
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     distance: Scalar
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Matrix21
 *     H: Matrix23_1
 */
template <typename Scalar>
void ComputeFlowXyInnovVarAndHx(const matrix::Matrix<Scalar, 24, 1>& state,
                                const matrix::Matrix<Scalar, 23, 23>& P, const Scalar distance,
                                const Scalar R, const Scalar epsilon,
                                matrix::Matrix<Scalar, 2, 1>* const innov_var = nullptr,
                                matrix::Matrix<Scalar, 23, 1>* const H = nullptr) {
  // Total ops: 196

  // Input arrays

  // Intermediate terms (33)
  const Scalar _tmp0 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp2 = 1 - 2 * _tmp1;
  const Scalar _tmp3 =
      Scalar(1.0) /
      (distance + epsilon * (2 * math::min<Scalar>(0, (((distance) > 0) - ((distance) < 0))) + 1));
  const Scalar _tmp4 = _tmp3 * (-2 * _tmp0 + _tmp2);
  const Scalar _tmp5 = 2 * state(2, 0);
  const Scalar _tmp6 = _tmp5 * state(0, 0);
  const Scalar _tmp7 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp8 = _tmp5 * state(3, 0);
  const Scalar _tmp9 = 2 * state(0, 0);
  const Scalar _tmp10 = _tmp9 * state(1, 0);
  const Scalar _tmp11 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp12 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp13 = -_tmp0;
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = _tmp3 * (state(4, 0) * (_tmp6 + _tmp7) + state(5, 0) * (-_tmp10 + _tmp8) +
                                 state(6, 0) * (_tmp1 - _tmp11 + _tmp14));
  const Scalar _tmp16 = _tmp9 * state(3, 0);
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = _tmp5 * state(1, 0);
  const Scalar _tmp19 = _tmp17 + _tmp18;
  const Scalar _tmp20 = _tmp19 * _tmp3;
  const Scalar _tmp21 = _tmp10 + _tmp8;
  const Scalar _tmp22 = _tmp21 * _tmp3;
  const Scalar _tmp23 = -_tmp7;
  const Scalar _tmp24 = -_tmp12;
  const Scalar _tmp25 = _tmp3 * (state(4, 0) * (_tmp1 + _tmp11 + _tmp13 + _tmp24) +
                                 state(5, 0) * (_tmp17 - _tmp18) + state(6, 0) * (_tmp23 + _tmp6));
  const Scalar _tmp26 = _tmp3 * (-2 * _tmp11 + _tmp2);
  const Scalar _tmp27 = -_tmp6;
  const Scalar _tmp28 = -_tmp1 + _tmp11;
  const Scalar _tmp29 = _tmp3 * (state(4, 0) * (_tmp23 + _tmp27) + state(5, 0) * (_tmp10 - _tmp8) +
                                 state(6, 0) * (_tmp0 + _tmp24 + _tmp28));
  const Scalar _tmp30 =
      _tmp3 * (_tmp19 * state(4, 0) + _tmp21 * state(6, 0) + state(5, 0) * (_tmp14 + _tmp28));
  const Scalar _tmp31 = _tmp3 * (_tmp16 + _tmp18);
  const Scalar _tmp32 = _tmp3 * (_tmp27 + _tmp7);

  // Output terms (2)
  if (innov_var != nullptr) {
    matrix::Matrix<Scalar, 2, 1>& _innov_var = (*innov_var);

    _innov_var(0, 0) = R +
                       _tmp15 * (P(0, 0) * _tmp15 + P(2, 0) * _tmp25 + P(3, 0) * _tmp20 +
                                 P(4, 0) * _tmp4 + P(5, 0) * _tmp22) +
                       _tmp20 * (P(0, 3) * _tmp15 + P(2, 3) * _tmp25 + P(3, 3) * _tmp20 +
                                 P(4, 3) * _tmp4 + P(5, 3) * _tmp22) +
                       _tmp22 * (P(0, 5) * _tmp15 + P(2, 5) * _tmp25 + P(3, 5) * _tmp20 +
                                 P(4, 5) * _tmp4 + P(5, 5) * _tmp22) +
                       _tmp25 * (P(0, 2) * _tmp15 + P(2, 2) * _tmp25 + P(3, 2) * _tmp20 +
                                 P(4, 2) * _tmp4 + P(5, 2) * _tmp22) +
                       _tmp4 * (P(0, 4) * _tmp15 + P(2, 4) * _tmp25 + P(3, 4) * _tmp20 +
                                P(4, 4) * _tmp4 + P(5, 4) * _tmp22);
    _innov_var(1, 0) = R -
                       _tmp26 * (-P(1, 3) * _tmp29 - P(2, 3) * _tmp30 - P(3, 3) * _tmp26 -
                                 P(4, 3) * _tmp31 - P(5, 3) * _tmp32) -
                       _tmp29 * (-P(1, 1) * _tmp29 - P(2, 1) * _tmp30 - P(3, 1) * _tmp26 -
                                 P(4, 1) * _tmp31 - P(5, 1) * _tmp32) -
                       _tmp30 * (-P(1, 2) * _tmp29 - P(2, 2) * _tmp30 - P(3, 2) * _tmp26 -
                                 P(4, 2) * _tmp31 - P(5, 2) * _tmp32) -
                       _tmp31 * (-P(1, 4) * _tmp29 - P(2, 4) * _tmp30 - P(3, 4) * _tmp26 -
                                 P(4, 4) * _tmp31 - P(5, 4) * _tmp32) -
                       _tmp32 * (-P(1, 5) * _tmp29 - P(2, 5) * _tmp30 - P(3, 5) * _tmp26 -
                                 P(4, 5) * _tmp31 - P(5, 5) * _tmp32);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _h = (*H);

    _h.setZero();

    _h(0, 0) = _tmp15;
    _h(2, 0) = _tmp25;
    _h(3, 0) = _tmp20;
    _h(4, 0) = _tmp4;
    _h(5, 0) = _tmp22;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
