// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_gnss_yaw_pred_innov_var_and_h
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     antenna_yaw_offset: Scalar
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     meas_pred: Scalar
 *     innov_var: Scalar
 *     H: Matrix23_1
 */
template <typename Scalar>
void ComputeGnssYawPredInnovVarAndH(const matrix::Matrix<Scalar, 24, 1>& state,
                                    const matrix::Matrix<Scalar, 23, 23>& P,
                                    const Scalar antenna_yaw_offset, const Scalar R,
                                    const Scalar epsilon, Scalar* const meas_pred = nullptr,
                                    Scalar* const innov_var = nullptr,
                                    matrix::Matrix<Scalar, 23, 1>* const H = nullptr) {
  // Total ops: 95

  // Input arrays

  // Intermediate terms (28)
  const Scalar _tmp0 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp2 = 1 - 2 * _tmp1;
  const Scalar _tmp3 = std::sin(antenna_yaw_offset);
  const Scalar _tmp4 = 2 * state(0, 0);
  const Scalar _tmp5 = _tmp4 * state(3, 0);
  const Scalar _tmp6 = 2 * state(2, 0);
  const Scalar _tmp7 = _tmp6 * state(1, 0);
  const Scalar _tmp8 = std::cos(antenna_yaw_offset);
  const Scalar _tmp9 = _tmp3 * (-2 * _tmp0 + _tmp2) + _tmp8 * (_tmp5 + _tmp7);
  const Scalar _tmp10 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp11 = -_tmp5;
  const Scalar _tmp12 = _tmp11 + _tmp7;
  const Scalar _tmp13 = _tmp12 * _tmp3 + _tmp8 * (-2 * _tmp10 + _tmp2);
  const Scalar _tmp14 = _tmp13 + epsilon * ((((_tmp13) > 0) - ((_tmp13) < 0)) + Scalar(0.5));
  const Scalar _tmp15 = _tmp6 * state(0, 0);
  const Scalar _tmp16 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp17 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp18 = _tmp9 / _tmp17;
  const Scalar _tmp19 = _tmp6 * state(3, 0);
  const Scalar _tmp20 = _tmp4 * state(1, 0);
  const Scalar _tmp21 = Scalar(1.0) / (_tmp14);
  const Scalar _tmp22 = _tmp17 / (_tmp17 + std::pow(_tmp9, Scalar(2)));
  const Scalar _tmp23 =
      _tmp22 * (-_tmp18 * _tmp8 * (-_tmp15 - _tmp16) + _tmp21 * _tmp8 * (-_tmp19 + _tmp20));
  const Scalar _tmp24 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp25 = -_tmp0 + _tmp10;
  const Scalar _tmp26 =
      _tmp22 * (-_tmp18 * (_tmp12 * _tmp8 + _tmp3 * (_tmp1 - _tmp24 + _tmp25)) +
                _tmp21 * (_tmp3 * (_tmp11 - _tmp7) + _tmp8 * (-_tmp1 + _tmp24 + _tmp25)));
  const Scalar _tmp27 =
      _tmp22 * (-_tmp18 * _tmp3 * (_tmp15 + _tmp16) + _tmp21 * _tmp3 * (_tmp19 - _tmp20));

  // Output terms (3)
  if (meas_pred != nullptr) {
    Scalar& _meas_pred = (*meas_pred);

    _meas_pred = std::atan2(_tmp9, _tmp14);
  }

  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = R + _tmp23 * (P(0, 1) * _tmp27 + P(1, 1) * _tmp23 + P(2, 1) * _tmp26) +
                 _tmp26 * (P(0, 2) * _tmp27 + P(1, 2) * _tmp23 + P(2, 2) * _tmp26) +
                 _tmp27 * (P(0, 0) * _tmp27 + P(1, 0) * _tmp23 + P(2, 0) * _tmp26);
  }

  if (H != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _h = (*H);

    _h.setZero();

    _h(0, 0) = _tmp27;
    _h(1, 0) = _tmp23;
    _h(2, 0) = _tmp26;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
